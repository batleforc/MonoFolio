// This file is auto-generated by @hey-api/openapi-ts

/**
 * Timeline of the blog space, contain the short representation of the pages.
 */
export type BlogTimeline = {
    pages: {
        [key: string]: PageShort;
    };
};

/**
 * The recursive structure of the sidebar containing the pages and sub-categories of the documentation.
 */
export type DocCategory = {
    has_index: boolean;
    name: string;
    pages: Array<PageShort>;
    sub_categories: Array<DocCategory>;
};

/**
 * Header of a markdown file.
 */
export type DocHeader = {
    date: string;
    description?: string | null;
    image?: string | null;
    links?: Array<DocHeaderLink>;
    spec?: DocHeaderSpec;
    tags?: Array<string>;
    techno?: Array<string>;
    title: string;
    weight?: number;
    writter?: DocHeaderWritter;
};

/**
 * Link present in the header of a markdown file.
 */
export type DocHeaderLink = {
    name: string;
    url: string;
};

/**
 * Specification of the header of a markdown file, include the information if a Header is a blog/project/doc.
 */
export type DocHeaderSpec = {
    blog?: boolean;
    doc?: boolean;
    project?: boolean;
};

/**
 * Writer present in the header of a markdown file.
 */
export type DocHeaderWritter = {
    avatar: string;
    name: string;
    url: string;
};

/**
 * Content of the home page.
 */
export type HomeContent = {
    coverTitle: Array<string>;
    cvUrl: string;
    history: Array<HomeHistory>;
    name: string;
    presentation: string;
    url: Array<HomeUrl>;
};

/**
 * History of the home page, contain a part of the history of Max Batleforc.
 */
export type HomeHistory = {
    date: string;
    description: string;
    imgUrl: string;
    lieux: string;
    title: string;
    url?: Array<HomeHistoryUrl> | null;
    weight: number;
};

/**
 * Url that should be present on the history.
 */
export type HomeHistoryUrl = {
    name: string;
    url: string;
};

/**
 * Url that should be present on the home page.
 */
export type HomeUrl = {
    imgUrl: string;
    name: string;
    primaire: boolean;
    url: string;
};

/**
 * A page containing the content, metadata and name of the page.
 */
export type Page = {
    content: string;
    metadata: DocHeader;
    name: string;
};

/**
 * Short representation of a page, containing only the metadata and the path to the page.
 */
export type PageShort = {
    metadata: DocHeader;
    name: string;
    path: string;
};

export type GetTimelineData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/blog';
};

export type GetTimelineErrors = {
    /**
     * Internal server error.
     */
    500: unknown;
};

export type GetTimelineResponses = {
    /**
     * Content of the blog timeline ordered by date.
     */
    200: BlogTimeline;
};

export type GetTimelineResponse = GetTimelineResponses[keyof GetTimelineResponses];

export type GetDocSidebarData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/doc';
};

export type GetDocSidebarErrors = {
    /**
     * Internal server error.
     */
    500: unknown;
};

export type GetDocSidebarResponses = {
    /**
     * Doc category sidebar.
     */
    200: DocCategory;
};

export type GetDocSidebarResponse = GetDocSidebarResponses[keyof GetDocSidebarResponses];

export type GetHomeData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/home';
};

export type GetHomeErrors = {
    /**
     * Internal server error.
     */
    500: unknown;
};

export type GetHomeResponses = {
    /**
     * Content of the home page.
     */
    200: HomeContent;
};

export type GetHomeResponse = GetHomeResponses[keyof GetHomeResponses];

export type GetMediaData = {
    body?: never;
    path?: never;
    query: {
        /**
         * Path to the media asset.
         */
        path: string;
    };
    url: '/api/media';
};

export type GetMediaErrors = {
    /**
     * Page not found inside of the Media folder or path invalid.
     */
    404: unknown;
    /**
     * Internal server error.
     */
    500: unknown;
};

export type GetMediaResponses = {
    /**
     * Media content if found.
     */
    200: unknown;
};

export type GetPageData = {
    body?: never;
    path?: never;
    query: {
        /**
         * Path to the markdown page.
         */
        path: string;
    };
    url: '/api/page';
};

export type GetPageErrors = {
    /**
     * Page not found or path invalid.
     */
    404: unknown;
    /**
     * Internal server error.
     */
    500: unknown;
};

export type GetPageResponses = {
    /**
     * Content of a full page if found.
     */
    200: Page;
};

export type GetPageResponse = GetPageResponses[keyof GetPageResponses];