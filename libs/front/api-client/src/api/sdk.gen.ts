// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from '@hey-api/client-axios';
import type { GetTimelineData, GetTimelineResponse, GetDocSidebarData, GetDocSidebarResponse, GetHomeData, GetHomeResponse, GetMediaData, GetPageData, GetPageResponse, GetProjectListData, GetProjectListResponse, GetPageV2Data, GetPageV2Response } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * Get the blog timeline
 * Get blog timeline with minimal description of each article.
 */
export const getTimeline = <ThrowOnError extends boolean = false>(options?: Options<GetTimelineData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetTimelineResponse, unknown, ThrowOnError>({
        url: '/api/blog',
        ...options
    });
};

/**
 * Get doc sidebar
 * Get doc sidebar with minimal description of each article.
 */
export const getDocSidebar = <ThrowOnError extends boolean = false>(options?: Options<GetDocSidebarData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetDocSidebarResponse, unknown, ThrowOnError>({
        url: '/api/doc',
        ...options
    });
};

/**
 * Get home content
 * Get the content meant for the home page.
 */
export const getHome = <ThrowOnError extends boolean = false>(options?: Options<GetHomeData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetHomeResponse, unknown, ThrowOnError>({
        url: '/api/home',
        ...options
    });
};

/**
 * Get media from the media folder
 * Get the media asset from the media folder.
 */
export const getMedia = <ThrowOnError extends boolean = false>(options: Options<GetMediaData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
        url: '/api/media',
        ...options
    });
};

/**
 * Get a page content
 * Fetch page's content by page path in DbFolder.
 */
export const getPage = <ThrowOnError extends boolean = false>(options: Options<GetPageData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetPageResponse, unknown, ThrowOnError>({
        url: '/api/page',
        ...options
    });
};

/**
 * Get project list
 * Get project list with minimal description of each article.
 */
export const getProjectList = <ThrowOnError extends boolean = false>(options?: Options<GetProjectListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetProjectListResponse, unknown, ThrowOnError>({
        url: '/api/projects',
        ...options
    });
};

/**
 * Get a page content in V2
 * Fetch page's content by page path in DbFolder, return page in the V2 format.
 */
export const getPageV2 = <ThrowOnError extends boolean = false>(options: Options<GetPageV2Data, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetPageV2Response, unknown, ThrowOnError>({
        url: '/api/v2/page',
        ...options
    });
};